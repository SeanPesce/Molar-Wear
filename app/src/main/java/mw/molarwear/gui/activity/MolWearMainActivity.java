package mw.molarwear.gui.activity;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.LinearLayout;
import android.widget.TextView;

import java.util.List;

import mw.molarwear.R;
import mw.molarwear.data.classes.MolarWearProject;
import mw.molarwear.data.handlers.ProjectHandler;
import mw.molarwear.gui.fragment.ProjectsListFragment;
import mw.molarwear.util.AppUtility;
import mw.molarwear.util.FileUtility;

/**
 * This is the main app activity screen (excluding the loader). This activity page allows
 *  the user to view, create, edit, delete, or share their research projects.
 *
 * @author Generated by <a href="https://developer.android.com/studio">Android Studio</a>
 * @author Sean Pesce
 *
 * @see    AppCompatActivity
 * @see    MolarWearProject
 */

public class MolWearMainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {

    // GUI
    Toolbar _toolbarNav;

    ProjectsListFragment _fragProjects;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        AppUtility.CONTEXT = this;

        setContentView(R.layout.activity_main);

        _toolbarNav = (Toolbar) findViewById(R.id.toolbar_nav);
        setSupportActionBar(_toolbarNav);


        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
            this, drawer, _toolbarNav, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        if (ProjectHandler.projectCount() == 0) {
            ProjectHandler.loadProjects();
        }

        _fragProjects = (ProjectsListFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_list_projects);

        AppUtility.VIEW = findViewById(R.id.content_main);
        setTitle(getResources().getString(R.string.title_choose_proj));
        if (AppUtility.LOAD_ERROR_COUNT() > 0) {
            AppUtility.printSnackBarMsg(String.format(getString(R.string.err_startup_proj_load), AppUtility.LOAD_ERROR_COUNT()));
        }

        FileUtility.checkExternalStoragePermissions(this);

        if (savedInstanceState == null) {

        } else {
            // App was resumed
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        AppUtility.CONTEXT = this;
        AppUtility.VIEW = findViewById(R.id.content_main);
        if (ProjectHandler.projectCount() == 0) {
            ProjectHandler.loadProjects();
        }
        _fragProjects.updateToolbar();
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.options_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            AppUtility.openPreferencesDialog(this);
            return true;
        } else if (id == R.id.bt_import) {
            importProject();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle subject_editor_navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_import_project) {
            importProject();
        } else if (id == R.id.nav_share) {
            AppUtility.featureNotImplementedYet();
        } else if (id == R.id.nav_github) {
            Uri githubRepo = Uri.parse(getResources().getString(R.string.github));
            startActivity(new Intent(Intent.ACTION_VIEW, githubRepo));
        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // Reference: https://github.com/android-ide/platform_development/blob/master/samples/ApiDemos/src/com/example/android/apis/content/DocumentsSample.java
        final ContentResolver resolver = getContentResolver();

        if (requestCode == FileUtility.REQUEST_CODE_READ) {
            if (FileUtility.USE_SYSTEM_FILE_CHOOSER) {
                final Uri uri = data != null ? data.getData() : null;
                if (uri == null) {
                    // No file was selected
                    AppUtility.printSnackBarMsg(getString(R.string.out_msg_no_file_sel));
                    return;
                }
                ProjectHandler.importProject(FileUtility.getPathFromURI(uri));
            } else {
                if (resultCode == Activity.RESULT_OK) {
                    final List<Uri> files = com.nononsenseapps.filepicker.Utils.getSelectedFilesFromResult(data);
                    if (!files.isEmpty()) {
                        ProjectHandler.importProject(com.nononsenseapps.filepicker.Utils.getFileForUri(files.get(0)).getAbsolutePath());
                    } else {
                        AppUtility.printSnackBarMsg(getString(R.string.out_msg_no_file_sel));
                        return;
                    }
                } else {
                    AppUtility.printSnackBarMsg(getString(R.string.out_msg_no_file_sel));
                    return;
                }
            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case FileUtility.REQUEST_CODE_EXT_STORAGE_PERMISSIONS: {
                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // Access granted
                } else {
                    AppUtility.printSnackBarMsg(R.string.err_access_denied);
                }
                return;
            }
        }
        AppUtility.printToast(this, "Test");
    }

    public void importProject() {
        FileUtility.createFileChooser(this, FileUtility.REQUEST_CODE_READ);
    }
}
